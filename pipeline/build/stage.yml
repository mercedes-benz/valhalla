parameters:
  name: null
  variables: []

stages:
  - stage: ${{ parameters.name }}
    displayName: ${{ parameters.name }}
    condition: eq(variables['run.build'], 'True')
    variables:
      - ${{ each group in parameters.variables }}:
          - group: ${{ group }}

    jobs:
      - job: ${{ parameters.name }}
        displayName: ${{ parameters.name }}
        pool:
          vmImage: ubuntu-22.04
        timeoutInMinutes: 360
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
            displayName: 'Use Python 3.x'

          - script: |
              python -m pip install --upgrade conan
            displayName: 'Install dependencies'
          
          - task: DownloadSecureFile@1
            name: sonarcert
            displayName: Sonar Certificate
            inputs:
              secureFile: gsep.pfx

          - bash: |
              source pipeline/build/scripts/10-validate.sh
            name: validate
            displayName: Validate
            env:
              SHARE_REGISTRY_PASSWORD: $(share.registry.password)
              SHARE_CLIENT_SECRET: $(share.client.secret)

          - bash: |
              source pipeline/build/scripts/11-version.sh
            name: version
            displayName: Version


          - bash: |
              source pipeline/build/scripts/20-package.sh
            name: package
            displayName: Package
            env:
              SHARE_REGISTRY_PASSWORD: $(share.registry.password)

          - bash: |
              source pipeline/build/scripts/21-acr-cleanup.sh
            name: acrCleanup
            displayName: ACR Cleanup
            condition: and(succeeded(), eq(variables['run.acr.cleanup'], 'true'))
            continueOnError: true
            env:
              SHARE_CLIENT_SECRET: $(share.client.secret)

          - bash: |
              source pipeline/build/scripts/30-scan.sh
            name: scan
            displayName: Scanners
            env:
              SHARE_REGISTRY_PASSWORD: $(share.registry.password)
              DEVOPS_TOKEN: $(System.AccessToken)
              BLACKDUCK_PREFIX: $(blackduck.project.prefix)
              BLACKDUCK_TOKEN: $(blackduck.api.token)
            condition: and(succeeded(), eq(variables['blackduck.enabled'], 'true'))

